# Importazione librerie
# ==============================================================================
setwd("C:\\Users\\sosjj\\OneDrive\\Desktop\\ML-project\\ML-project")
library(caret)
library(e1071)
library(class)
library(dplyr)
library(rpart)
library(base)
library(ggplot2)
library(stringr)
# Caricamento delle funzioni
# ==============================================================================
source("functions\\pca.R")
source("functions\\models.R")
source("functions\\ROC_dt.R")
source("functions\\ROC_rf.R")
source("functions\\ROC_svm.R")
# Carica il Dataset + Preprocessing
# ==============================================================================
data <- loadDB("dataset/laptop_price.csv", type=4)
# Divisione in dataset di train e di test
# ==============================================================================
set.seed(123)
ind <- sample(2, nrow(data), replace=TRUE, prob=c(0.7, 0.3))
test_data <- data[ind==2, ]
train_data <- data[ind==1, ]
# MODELLO SVM
testSVM <- function(train_data, test_data){
formula <- range ~ .
model <- svm(formula, data=train_data, kernel="radial", cost=1, probability = TRUE)
predictions <- predict(model, test_data)
getStats(predictions, test_data$range, "SVM")
return(model)
}
# Tutti i modelli che abbiamo testato con rispettive stats
# ==============================================================================
modelSVM <- testSVM(train_data, test_data)
ggplotConfusionMatrix(confusionMatrix(predict(modelSVM, newdata = test_data, type = "class"), test_data$range))
# MODELLO RANDOM FOREST
testRandomForest <- function(train_data, test_data){
library(randomForest)
formula <- range ~ .
model <- randomForest(formula, data=train_data, na.action=na.fail, ntree=10, mtry = 3)
predictions <- predict(model, test_data)
getStats(predictions, test_data$range, "RANDOM FOREST")
return(model)
}
modelRF <- testRandomForest(train_data, test_data)
ggplotConfusionMatrix(confusionMatrix(predict(modelRF, newdata = test_data, type = "class"), test_data$range))
modelTree <- testDecisionalTree(train_data, test_data)
ggplotConfusionMatrix(confusionMatrix(predict(modelTree, newdata = test_data, type = "class"), test_data$range))
