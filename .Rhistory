source("C:/Users/Mike/Desktop/LaboratorioR/Script - Percettrone-20221121/lab4.R")
source("C:/Users/Mike/Desktop/LaboratorioR/Script - Percettrone-20221121/lab4.R")
qplot(dataset[,3], dataset[,4], colour = factor(dataset[,1]),
xlab="V3", ylab="V4") + labs(colour = 'class')
# Importazione librerie
# ==============================================================================
setwd("C:\\Users\\Mike\\Desktop\\ML-project")
library(caret)
library(e1071)
library(class)
library(dplyr)
library(rpart)
library(base)
library(ggplot2)
library(stringr)
# Caricamento delle funzioni
# ==============================================================================
source("functions\\pca.R")
source("functions\\models.R")
source("functions\\ROC_dt.R")
source("functions\\ROC_rf.R")
source("functions\\ROC_svm.R")
# Carica il Dataset + Preprocessing
# ==============================================================================
data <- loadDB("dataset/laptop_price.csv", type=4)
ggplot(data, aes(x = range)) + geom_bar(aes(fill = range)) + facet_wrap(~ Gpu_Vendor)
# Carica il Dataset + Preprocessing
# ==============================================================================
data <- loadDB("dataset/laptop_price.csv", type=4)
# Divisione in dataset di train e di test
# ==============================================================================
set.seed(123)
ind <- sample(2, nrow(data), replace=TRUE, prob=c(0.7, 0.3))
test_data <- data[ind==2, ]
train_data <- data[ind==1, ]
# Tutti i modelli che abbiamo testato con rispettive stats
# ==============================================================================
modelSVM <- testSVM(train_data, test_data)
imp = varImp(modelSVM)  # SVM
modelTree <- testDecisionalTree(train_data, test_data)
imp = varImp(modelTree)  # Tree
plot(imp, top = 14)
imp = varImp(modelSVM)  # SVM
warnings()
imp = varImp(modelSVM)  # SVM
plot(imp, top = 5)
imp = varImp(modelTree)  # Tree
plot(imp, top = 14)
plot(imp, top = 5)
# ROC e AUC
# ==============================================================================
dtroc(modelTree, test_data)
rfroc(modelRF, test_data)
svmroc(modelSVM, test_data)
